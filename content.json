{"meta":{"title":"王宏亮","subtitle":"技术分享博客","description":"技术博客","author":"王宏亮","url":"https://whl88.github.io"},"pages":[{"title":"","date":"2023-02-20T09:12:16.065Z","updated":"2023-02-20T09:12:16.065Z","comments":true,"path":"404.html","permalink":"https://whl88.github.io/404.html","excerpt":"","text":""},{"title":"关于","date":"2018-12-14T11:41:44.000Z","updated":"2023-02-20T09:12:16.097Z","comments":true,"path":"about/index.html","permalink":"https://whl88.github.io/about/index.html","excerpt":"","text":"哥不在江湖，江湖却有哥的传说。"},{"title":"归档","date":"2023-02-20T09:12:16.098Z","updated":"2023-02-20T09:12:16.098Z","comments":true,"path":"archives/index.html","permalink":"https://whl88.github.io/archives/index.html","excerpt":"","text":""},{"title":"标签","date":"2023-02-20T09:12:16.112Z","updated":"2023-02-20T09:12:16.112Z","comments":true,"path":"tags/index.html","permalink":"https://whl88.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"去掉百度统计对自己的追踪","slug":"去掉百度统计对自己的追踪","date":"2018-12-23T14:31:05.000Z","updated":"2023-02-20T09:12:16.092Z","comments":true,"path":"2018/12/23/去掉百度统计对自己的追踪/","link":"","permalink":"https://whl88.github.io/2018/12/23/去掉百度统计对自己的追踪/","excerpt":"","text":"问题站长在使用诸如百度统计，谷歌分析等站长统计工具时，肯定想排除对自己的追踪，以看到真实的访问情况。在内网，我通过静态IP来排除，因为我们内网的IP与MAC地址是绑定的。那么问题来了，互联网上都是动态IP，怎么办呢？ 解决方法不绕弯子了，就是利用浏览器的广告屏蔽插件来实现。说起广告屏蔽插件，没有比 Adblock Plus更有名的了吧。没说的，先安装之，安装方式我就不啰嗦了。 看图说话，安装完以后按照下面的步骤进入自定义过滤规则界面：像我一样，加两条规则，一条针对百度，一条针对谷歌。12||hm.baidu.com^$third-partyhttps://www.google-analytics.com/* 验证最后附上一张F12的图，你一看就明白。","categories":[{"name":"工具","slug":"工具","permalink":"https://whl88.github.io/categories/工具/"}],"tags":[{"name":"百度统计","slug":"百度统计","permalink":"https://whl88.github.io/tags/百度统计/"},{"name":"拒绝跟踪","slug":"拒绝跟踪","permalink":"https://whl88.github.io/tags/拒绝跟踪/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"https://whl88.github.io/categories/工具/"}]},{"title":"Matomo Javascript 方式追踪 自定义变量","slug":"Matomo-Javascript-方式追踪-自定义变量","date":"2018-12-23T04:41:05.000Z","updated":"2023-02-20T09:12:16.078Z","comments":true,"path":"2018/12/23/Matomo-Javascript-方式追踪-自定义变量/","link":"","permalink":"https://whl88.github.io/2018/12/23/Matomo-Javascript-方式追踪-自定义变量/","excerpt":"","text":"Matomo默认监控很多客户端属性，有一些通过提交参数获得，有一些通过解析请求头获得。但这一些都是共用属性，像来源URL、客户端屏幕尺寸、系统版本、浏览器版本等，没有任何业务特性。如果想分析诸如“栏目分类”、“是否收藏”等业务属性，可以借助Matomo的自定义变量功能来实现。 首先自定义变量有 page 作用域和 visit 作用域之分。page 作用域内的变量描述的是当前页面本身的属性，在每次页面请求的时候都可以变化，比如“文章分类”、“商品名称”之类的；visit 作用域内的变量在一个完整的session中只允许有一个值，这种作用域的变量适合存“访问者性别”，“访问者身份证号”等跟访问者有关的属性。 存储的限制和扩展默认最多设置5个自定义变量，如果需要拓展可以执行一个命令1php console customvariables:set-max-custom-variables 10 运行上面的命令，首先本地得先安装php运行环境，console 其实是Matomo提供的一个脚本。 为什么有5个的个数限制呢？看一下Matomo的日志表结构就知道了。 收集直接样例代码123456789101112_paq.push(['setCustomVariable', // 还记得上面说过默认情况下自定义变量只能有5个吗？这个参数就是那5个变量的下标（1-5） 1, // 自定义变量的Key，将被存在日志表的 custom_var_k1中 \"栏目\", // 自定义变量的Vavlue，将被存在日志表的 custom_var_v1中 \"首页 &gt; 机关通告\", // 还记得上面说过自定义变量的作用域吗？将作用域传入，待选项是（visit,page） \"page\"]);_paq.push(['trackPageView']);//一定要在这一行代码之前调用上面的代码 报表设置页面将上面的代码放到你要跟踪的网页中，只要被调用一次，你就可以到你的设置页面看一下，变成下面的样子。 报表页面归档以后，你应该可以在报表页面看到如下报表。 关于归档： 1.Matomo 主要两大功能，收集日志和展现报表。所有收集的日志，在没有归档之前是不会产生报表的。2.默认的归档触发方式是“页面触发”，也就是说，当用户访问报表的时候，实时触发。这种触发方式好处是“实时”，很明显的一个缺点是“卡”。我监控的页面每天有2W左右访问量，简直了，卡到页面打不开。3.对于大访问量的网站，推荐使用定时任务触发（目前我就是用这种）。说白了就是用定时任务，定时执行一个命令行php console core:archive --url=http://xxx.xxx.xxx.xxx/matomo 1.windows/linux 各平台的如何使用定时任务，请自行google。2.还有一个小注意事项：两次调用命令的时间间隔一定要大于下图的设置(单位秒)，否则会被忽略 打完收工，有什么不明白的留言提问吧:)","categories":[{"name":"前端","slug":"前端","permalink":"https://whl88.github.io/categories/前端/"}],"tags":[{"name":"Matomo","slug":"Matomo","permalink":"https://whl88.github.io/tags/Matomo/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"https://whl88.github.io/categories/前端/"}]},{"title":"Matomo JavaScript 方式追踪单页面应用（SPA）","slug":"Matomo-JavaScript-方式追踪单页面应用（SPA）","date":"2018-12-19T13:23:13.000Z","updated":"2018-12-23T08:57:38.000Z","comments":true,"path":"2018/12/19/Matomo-JavaScript-方式追踪单页面应用（SPA）/","link":"","permalink":"https://whl88.github.io/2018/12/19/Matomo-JavaScript-方式追踪单页面应用（SPA）/","excerpt":"","text":"单页面应用（SPA）随着Vue、Angular、React等框架的崛起，已经成为一种潮流。由于单页面应用自始至终都一个在同一个Docment上渲染元素，页面根本不跳转，这也让 Matomo 在默认用法下不能自动追踪。最近在企业内网用 Matomo 做网站跟踪分析，有一个需求是跟踪手机端的应用（SPA应用）。研究了一番记录如下。 用JS方式追踪单页面应用，其原理就是当页面变动的时候，手动调用 Matomo 本来应该在页面加载时自动帮我们调用的几个API。 重新设置自定义变量用下面的代码将 page 作用域的 自定义变量删除：1_paq.push(['deleteCustomVariables', 'page']); 自定义变量有 page 作用域和 visit 作用域之分。page 作用域内的变量描述的是当前页面本身的属性，在每次页面请求的时候都可以变化，比如“文章分类”、“商品名称”之类的；visit 作用域内的变量在一个完整的session中只允许有一个值，这种作用域的变量适合存“访问者性别”，“访问者身份证号”等跟访问者有关的属性。关于自定义变量就说这么多，更多的信息可以先查看官方文档，我会尽快出一篇关于 Matomo [自定义变量] 和 自定义维度 的一篇文章。 设置页面加载时间你可能会用 Ajax 从服务器实时加载新模块，那你得做一个计时，并且把加载这个模块的耗时（毫秒数）通过下面这个 API 发送给 Matomo 。1_paq.push(['setGenerationTimeMs', timeItTookToLoadPage]); 设置引用页（Referer）告诉 Matomo 现在这个页面是从哪个页面跳过来的。1_paq.push(['setReferrerUrl', previousPageUrl]); 重要提示：123_paq.push(['deleteCustomVariables', 'page']);_paq.push(['setGenerationTimeMs', timeItTookToLoadPage]);_paq.push(['setReferrerUrl', previousPageUrl]); 上面的代码执行后需要执行_paq.push([&#39;trackPageView&#39;]);才能提交修改。具体的可以看文末的例子 追踪新内容当新的内容被加载到 Document 中，新内容这一块我们得让 Matomo 扫描。下面的一些代码不是必须的，根据你的需求来定。 如果新内容中有音视频，并且你用到了 Matomo 的音视频分析1_paq.push(['MediaAnalytics::scanForMedia', documentOrElement]); 如果新内容中有表单，并且你用到了 Matomo 的表单分析1_paq.push(['FormAnalytics::scanForForms', documentOrElement]); 如果新内容中有超链接，并且你用到了 Matomo 的离站链接分析、下载分析1_paq.push(['enableLinkTracking']); 如果你用到了 Matomo 的内容追踪1_paq.push(['trackContentImpressionsWithinNode', documentOrElement]); 如果你不想做那么多判断，你可以像下面的例子一样，一股脑全部调用一下，毕竟这也耗不了多少性能。 例子12345678910111213141516171819var currentUrl = location.href;window.addEventListener('hashchange', function() &#123; _paq.push(['setReferrerUrl', currentUrl]); currentUrl = '' + window.location.hash.substr(1); _paq.push(['setCustomUrl', currentUrl]); _paq.push(['setDocumentTitle', 'My New Title']); // remove all previously assigned custom variables, requires Matomo (formerly Piwik) 3.0.2 _paq.push(['deleteCustomVariables', 'page']); _paq.push(['setGenerationTimeMs', 0]); _paq.push(['trackPageView']); // make Matomo aware of newly added content var content = document.getElementById('content'); _paq.push(['MediaAnalytics::scanForMedia', content]); _paq.push(['FormAnalytics::scanForForms', content]); _paq.push(['trackContentImpressionsWithinNode', content]); _paq.push(['enableLinkTracking']);&#125;);","categories":[{"name":"前端","slug":"前端","permalink":"https://whl88.github.io/categories/前端/"}],"tags":[{"name":"Matomo","slug":"Matomo","permalink":"https://whl88.github.io/tags/Matomo/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://whl88.github.io/tags/JavaScript/"},{"name":"单页面","slug":"单页面","permalink":"https://whl88.github.io/tags/单页面/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"https://whl88.github.io/categories/前端/"}]}]}